create table cidade
(cod_cidade number(7),
 nome_cidade varchar2(100),
 uf  varchar2(2),
 pais varchar2(100),
 constraint cidade_pk primary key (cod_cidade));

insert into cidade(cod_cidade, nome_cidade ,uf,pais) values (1,'São Leopodo', 'rs','brasil');
insert into cidade(cod_cidade, nome_cidade ,uf,pais) values (2,'Sl', 'rs','brasil');
insert into cidade(cod_cidade, nome_cidade ,uf,pais) values (3,'Novo Hamburgo', 'rs','brasil');
insert into cidade(cod_cidade, nome_cidade ,uf,pais) values (4,'Nh', 'rs','brasil');

---------------------------------------
 create table pessoa
(cod_pessoa number(7),
 nome_pessoa varchar2(100),
 cpf varchar2(14),
 endereco varchar2(100),
 cod_cidade number(7),
 dt_nasc date,
 fone varchar2(30),
 email varchar2(80),
 constraint pessoa_pk primary key (cod_pessoa),
 constraint pessoa_cidade_fk foreign key (cod_cidade) references cidade(cod_cidade));

insert into pessoa (cod_pessoa, nome_pessoa, cpf, endereco, cod_cidade, dt_nasc, fone, email )
    values(1, 'Diele', 123456789, 'rua seis', 1, to_date('15/01/2023','dd/mm/rrrr'), null, null );
insert into pessoa (cod_pessoa, nome_pessoa, cpf, endereco, cod_cidade, dt_nasc, fone, email )
    values(2, 'barbara', 123456710, 'rua sete', 2, to_date('16/01/2023','dd/mm/rrrr'), null, null );
insert into pessoa (cod_pessoa, nome_pessoa, cpf, endereco, cod_cidade, dt_nasc, fone, email )
    values(3, 'di', 123456711, 'rua 8', 2, to_date('16/08/2023','dd/mm/rrrr'), null, null );
insert into pessoa (cod_pessoa, nome_pessoa, cpf, endereco, cod_cidade, dt_nasc, fone, email )
    values(4, 'camila', 123456712, 'rua 9', 1, to_date('29/01/2023','dd/mm/rrrr'), null, null );

--------------------------------------- 
 create table compra
 (cod_compra number(7),
  observacao varchar2(100),
  cnpj  number(20),
  vlr_compra number(12,2),
  data_compra date,
  cpf varchar2(14),
  qtd_produto number(12,2),
  cod_pessoa number(7),
  cod_cidade number(7),
  constraint compra_pk primary key (cod_compra),
 constraint compra_cidade_fk foreign key (cod_cidade) references cidade(cod_cidade),
 constraint compra_pessoa_fk foreign key (cod_pessoa) references pessoa(cod_pessoa)
 );

 insert into compra (cod_compra, observacao, cnpj,vlr_compra, data_compra,cpf, qtd_produto,cod_pessoa, cod_cidade)
     values (1,'feijão', 56489712, 12.1, to_date('11/09/2023','dd/mm/rrrr'),123456789,1,1,1);
 insert into compra (cod_compra, observacao, cnpj,vlr_compra, data_compra,cpf, qtd_produto,cod_pessoa, cod_cidade)
     values (2,'arroz', 56489713, 13.1, to_date('12/09/2023','dd/mm/rrrr'),123456710,2,2,2);
 insert into compra (cod_compra, observacao, cnpj,vlr_compra, data_compra,cpf, qtd_produto,cod_pessoa, cod_cidade)
     values (3,'milho', 56489714, 14.1, to_date('13/09/2023','dd/mm/rrrr'),123456711,3,3,3);
 insert into compra (cod_compra, observacao, cnpj,vlr_compra, data_compra,cpf, qtd_produto,cod_pessoa, cod_cidade)
     values (4,'alho', 56489715, 15.1, to_date('14/09/2023','dd/mm/rrrr'),123456712,4,4,4);
--------------------------------------- 
 create table produto
 (cod_produto number(7),
  descricao varchar2(100),
   constraint produto_pk primary key (cod_produto));

insert into produto (cod_produto, descricao) values (1,'aaaa');
insert into produto (cod_produto, descricao) values (2,'bala');
insert into produto (cod_produto, descricao) values (3,'milho');
---------------------------------------   
 create table compraproduto
 (seq_compraproduto number(7),
  cod_produto number(7),
  cod_compra  number(7),
  qtd         number(12,4),
  vlr_unitario number(12,2),
  constraint compraproduto_pk primary key (seq_compraproduto),
 constraint compraproduto_produto_fk foreign key (cod_produto)
 references produto(cod_produto),
 constraint compraproduto_compra_fk foreign key (cod_compra)
 references compra(cod_compra));

insert into compraproduto(seq_compraproduto, cod_produto, cod_compra, qtd, vlr_unitario )
	values (12, 1, 1,3,13.90 );
insert into compraproduto(seq_compraproduto, cod_produto, cod_compra, qtd, vlr_unitario )
	values (123, 1, 2,6,13.90 );
insert into compraproduto(seq_compraproduto, cod_produto, cod_compra, qtd, vlr_unitario )
	values (124, 2, 3,6,13.90 );
insert into compraproduto(seq_compraproduto, cod_produto, cod_compra, qtd, vlr_unitario )
	values (125, 2, 2,5,11.90 );
insert into compraproduto(seq_compraproduto, cod_produto, cod_compra, qtd, vlr_unitario )
	values (126, 2, 3,5,11.90 );

--EXERCÍCIOS DE REVISÃO
--1) Crie uma função que retorne o nome da pessoa, passando como parâmetro código da pessoa.
--2) Usando cursor, crie uma função que retorne a quantidade de compras e o valor total das compras de uma determinada pessoa. Passe como parametro o código da pessoa.
--3) Faça uma função que verifique se o  valor da compra (na tabela compra) é igual a soma dos produtos e suas quantidades (qtd * vlr_unitario).
--4) Faça uma função que retorne o nome da pessoa, o endereço  e a cidade da pessoa. Passar como parâmetro o código da pessoa.
--5) Faça uma função que retorne a quantidade de compras em que um determinado produto foi vendido. Por exemplo, o produto arroz foi vendido em 346 compras.
--6) Altere a questão 5, adicione como parâmetros a data da compra inicial e a data da compra final como parâmetros.
--7) Faça uma procedure que atualize o total da compra de acordo com a soma dos produtos cadastrados na tabela compraproduto.
--8) Faça uma procedure que insira uma cidade na tabela cidade. A procedure deve usar uma sequence e os parâmetros devem ser nome da cidade, uf e país.create sequence seq_cidade start with 10;
--9) Faça uma procedure que delete um produto da tabela produto. A procedure, antes de deletar, deve verificar se não há uma compra utilizando o código do produto. Se  houver, a procedure deve emitir um aviso de que o produto não pode ser deletado. Aqui a procedure está se antecipando a consistência da FK.
--10) Faça uma view que retorne a quantidade de pessoas cadastradas por cidade.
--11) Faça uma view que retorne a quantidade de compras efetuadas por cada cliente.
-- 12) Faça uma view que mostre  o nome da cidade, o nome da pessoa, o valor da compra e a soma dos produtos (qtd * valor _unitário) da tabela compraproduto.

--1) Crie uma função que retorne o nome da pessoa, passando como parâmetro código da pessoa.

create or replace function fnc_exer1(p_nome in varchar) 
    return varchar2 is
    v_retorno varchar2(100);
cursor c_x is 
	select nome_pessoa
	from pessoa
	where pessoa.cod_pessoa = p_nome;
begin
	open c_x;
	fetch c_x into v_retorno;
		if c_x%notfound then 
            return('não encontrou nenhum nome');
        end if;
		if c_x%found then 
            return(v_retorno);
        end if;
	close c_x;
end;

select fnc_exer1(1) from dual;

--2) Usando cursor, crie uma função que retorne a quantidade de compras e o valor total das compras de uma determinada pessoa. Passe como parametro o código da pessoa.


create or replace function fnc_exerc2(p_codPesso in number) 
return varchar is
cursor c_f is
	select nome_pessoa, count(1) contador
	from compra, compraproduto, pessoa
	where compra.cod_compra = compraproduto.cod_compra
    and compra.cod_pessoa = p_codPesso
	group by compra.cod_pessoa, pessoa.nome_pessoa;
	r_f c_f%rowtype;

cursor c_x is
	select pessoa.nome_pessoa, Sum (vlr_compra) soma
	from compra, pessoa
	where compra.cod_pessoa = pessoa.cod_pessoa
    and compra.cod_pessoa = p_codPesso
	group by pessoa.nome_pessoa;
	r_x c_x%rowtype;

begin
	open c_f;
	fetch c_f into r_f;
    	if c_f%notfound then 
                return('não encontrou');
            end if;	
	close c_f;

    open c_x;
    	fetch c_x into r_x;
        	if c_x%notfound then 
                    return('não encontrou nenhum valor');
                end if;
    	close c_x;

return(r_f.contador||' '||r_x.soma);

end;
	
select fnc_exerc2(3) from dual;


--3) Faça uma função que verifique se o  valor da compra (na tabela compra) é igual a soma dos produtos e suas quantidades (qtd * vlr_unitario).

create or replace function fnc_exerc3(p_codCompra in number) 
return varchar is
cursor c_a is
	select compra.vlr_compra, sum(compraproduto.qtd * compraproduto.vlr_unitario) soma
	from compra, compraproduto
    where compra.cod_compra = p_codCompra
	and compra.cod_compra = compraproduto.cod_compra
    group by compra.vlr_compra;	
r_a c_a%rowtype;

begin
    open c_a;
    fetch c_a into r_a;
    	if c_a%notfound then 
            return('sem compras');
        end if;
	close c_a;

return('Valor total das compras:'||r_a.vlr_compra|| ' Valor da soma dos produtos'||r_a.soma);
end;
select  fnc_exerc3(2) from dual;


--4) Faça uma função que retorne o nome da pessoa, o endereço  e a cidade da pessoa. Passar como parâmetro o código da pessoa.


create or replace function fnc_dados(p_codPessoa in number)
return varchar is 
cursor c_dados is
	select pessoa.nome_pessoa, pessoa.endereco, cidade.nome_cidade
	from pessoa, cidade 
	where pessoa.cod_cidade = cidade.cod_cidade
	and pessoa.cod_pessoa = p_codPessoa;
r_dados c_dados%rowtype;
begin 
	open c_dados;
	fetch c_dados into r_dados;
        if c_dados%notfound then 
            return('sem dados');
        end if;		
	close c_dados;
return('Nome: '||r_dados.nome_pessoa||' Endereço: '||r_dados.endereco||' Nome cidade: '||r_dados.nome_cidade);
end;

select fnc_dados(1) from dual;


--5) Faça uma função que retorne a quantidade de compras em que um determinado produto foi vendido. Por exemplo, o produto arroz foi vendido em 346 compras.

create or replace function fnc_exerc5 (p_codProd in number) 
return varchar is

cursor c_conta is
	select count(*) contador 
	from compra, compraproduto 
	where compra.cod_compra = compraproduto.cod_compra
	and compraproduto.cod_produto = p_codProd;
r_c c_conta%rowtype;
begin
	open c_conta;
	fetch c_conta into r_c;
		if c_conta%notfound then
            return('nenhuma compra');
        end if;
	close c_conta;
return('O produto foi vendido em '||r_c.contador||' compras');
end;

--quando eu for puxar no meu parâmetro o código do produto (exemplo: 1 ) 
--ele vai retornar quantos produtos foram comprados de acordo com o código
--da compra (exemplo: código produto 1 apareceu 3x na compra de código 3)

select fnc_exerc5(1) from dual;


--6) Altere a questão 5, adicione como parâmetros a data da compra inicial e a data da compra final como parâmetros.

--6) Altere a questão 5, adicione como parâmetros a data da compra inicial e a data da 
--compra final como parâmetros.
create or replace function fnc_exerc6 (p_codProd in number, p_dtinicial in date, p_dtfinal in date ) 
return varchar is

cursor c_conta is
	select count(*) contador 
	from compra, compraproduto 
	where compra.cod_compra = compraproduto.cod_compra
	and compraproduto.cod_produto = p_codProd
    and compra.data_compra between p_dtinicial and p_dtfinal;--entre p_dtinicial e p_dtfinal
r_c c_conta%rowtype;
begin
	open c_conta;
	fetch c_conta into r_c;
		if c_conta%notfound then
            return('nenhuma compra');
        end if;
	close c_conta;
return('O produto foi vendido em '||r_c.contador||' compras');
end;

select fnc_exerc6(2,to_date('01/01/2022','dd/mm/rrrr'), to_date('01/01/2023','dd/mm/rrrr')) 
    from dual;
--selecionei a função(codigoproduto, datainicial, datafinal)

--7) Faça uma procedure que atualize o total da compra de acordo com a soma dos produtos cadastrados na tabela compraproduto.

create or replace procedure prc_exerc7 (p_codCompra in number )
is 
cursor c_soma is 
    select nvl(sum(compraproduto.qtd*compraproduto.vlr_unitario),0) soma --FUNÇÃO NVL***
	from compraproduto
	where compraproduto.cod_compra = p_codCompra;
r_soma c_soma%rowtype;
begin
	open c_soma;
	fetch c_soma into r_soma;
	close c_soma;

	if r_soma.soma = 0 then 
        raise_application_error(-20200, 'Valor dos produtos zerados, verifique');
	else 
        update compra set vlr_compra = r_soma.soma
        where compra.cod_compra = p_codCompra;
	end if;
end;
--FUNÇÃO NVL: exemplo: NVL(expr1, expr2)
-- Função NVL avalia a expressão expr1 e, se for nula, retorna expr2. 
--Caso contrário, retorna expr1. Ambas as expressões expr1 e expr2 devem ter o
--mesmo tipo de dados ou um tipo de dados compatível.

exec prc_exerc7 (1);

--8) Faça uma procedure que insira uma cidade na tabela cidade. A procedure deve usar uma sequence e os parâmetros devem ser nome da cidade, uf e país.
--create sequence seq_cidade start with 10;


create sequence seq_cidade start with 5; PRIMEIRO CRIOU A SEQUENCE
----
create or replace procedure prc_exerc8 (p_nome_cidade in varchar,p_uf in varchar, p_pais in varchar) is 
    
begin 
insert into cidade (cod_cidade, nome_cidade,uf,pais)
    values (seq_cidade.nextval, p_nome_cidade,p_uf,p_pais );
end;
exec prc_exerc8('Santa Maria', 'RS', 'Brasil');
select * from cidade;


--9) Faça uma procedure que delete um produto da tabela produto. A procedure, antes de deletar, deve verificar se não há uma compra utilizando o código do produto. Se  houver, a procedure deve emitir um aviso de que o produto não pode ser deletado. Aqui a procedure está se antecipando a consistência da FK.

create or replace procedure prc_exerc9 (p_codProduto in number) is
cursor c_verifica is 
	select count(1) conta
	from compraproduto
	where cod_produto = p_codProduto;
r_verifica c_verifica%rowtype;

begin
	open c_verifica;
	fetch c_verifica into r_verifica;
	close c_verifica;

	if r_verifica.conta > 0 then 
 	raise_application_error(-20200,
        'Este item não pode ser apagado pois há compra feita neste produto');
	else
        delete produto
        where cod_produto = p_codProduto;
    end if;
end;

exec prc_exerc9(2);

--10) Faça uma view que retorne a quantidade de pessoas cadastradas por cidade.

create or replace View v_exer10 as
	select cidade.nome_cidade, count(*) conta
	from cidade, pessoa
    where cidade.cod_cidade = pessoa.cod_cidade
	group by cidade.nome_cidade;


select * from v_exer10;


--11) Faça uma view que retorne a quantidade de compras efetuadas por cada cliente.


create or replace View v_exerc11 as 
	select pessoa.nome_pessoa, count(*) conta
	from compra, pessoa
	where compra.cod_pessoa = pessoa.cod_pessoa
	group by pessoa.nome_pessoa;
select * from v_exerc11;

-- 12) Faça uma view que mostre  o nome da cidade, o nome da pessoa, o valor da compra e a soma dos produtos (qtd * valor _unitário) da tabela compraproduto.

create or replace View v_exerc12 as
	select cidade.nome_cidade, pessoa.nome_pessoa, compra.vlr_compra, 
    Sum(compraproduto.qtd * compraproduto.vlr_unitario ) somaProdutos
	from cidade, pessoa, compraproduto, compra
	where cidade.cod_cidade = pessoa.cod_cidade
	and compra.cod_pessoa = pessoa.cod_pessoa
	and compra.cod_compra = compraproduto.cod_compra
    group by cidade.nome_cidade, pessoa.nome_pessoa, compra.vlr_compra ;

select * from v_exerc12;





